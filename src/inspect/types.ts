import { UUID } from "../shared/types";
import { ExtBuffer } from "../shared/msgpack";

/**
 * Represents a transform vector.
 */
export type Transform = [number, number, number];

/**
 * Represents a schema definition.
 */
export type Schema = string[];

/**
 * Represents a list of numbers, potentially structured.
 */
export type NumericList = number[];

/**
 * Results from attempting zlib decompression on an ExtBuffer.
 */
export interface ZlibAttemptResult {
    index: number;
    type: number;
    method: 'inflate' | 'inflateRaw' | 'gunzip';
}

/**
 * Basic statistics for string lengths.
 */
export interface StringLengthStats {
    min: number;
    max: number;
    avg: number;
    count: number;
}

/**
 * Consolidated report generated by the inspector.
 */
export interface InspectionReport {
    filePath: string;
    totalItems: number;
    typeCounts: Record<string, number>;
    extFreq: Record<number, number>;
    uuids: { count: number; sample: UUID[] };
    transforms: { count: number; sample: Transform[] };
    geometryBlobs: { count: number };
    schemas: { count: number };
    numericLists: { count: number };
    repeatedLists: { count: number };
    zlibAttempts: ZlibAttemptResult[];
    stringLengthStats: StringLengthStats;
    errors?: string[]; // Optional field for errors during inspection
} 